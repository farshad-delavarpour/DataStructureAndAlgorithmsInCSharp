using System.Collections.Generic;

namespace DataStructureAndAlgorithms.LeetCode;

public static class ProgrammingSkills
{
    /// <summary>
    /// You are given two strings s and t.
    // String t is generated by random shuffling string s and then add one more letter at a random position.
    // Return the letter that was added to t.
    /// </summary>
    /// <param name="s"></param>
    /// <param name="t"></param>
    /// <returns></returns>
    public static char FindTheDifference(string s, string t)
    {
        const int ASCII_SIZE = 256;
        int[] frequencies = new int[ASCII_SIZE];
        foreach (char @char in s)
        {
            frequencies[@char]++;
        }

        foreach(char @char in t)
        {
            if (frequencies[@char] == 0)
                return @char;
            frequencies[@char]--;
        }
        return default;
    }

    public static int FindIndexOfFirstOccurrence(string text, string target)
    {
        for (int i = 0; i <= text.Length - target.Length; i++)
        {
            if(text.Substring(i, target.Length) == target)
                return i;
        }

        return -1;
    }

    /// <summary>
    /// Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
    /// Example 1:
    /// Input: s = "abab"
    /// Output: true
    /// Explanation: It is the substring "ab" twice.
    /// </summary>
    /// <param name="s"></param>
    /// <returns></returns>
    public static bool RepeatedSubstringPattern(string s)
    {
        for(int i = 1; i <= s.Length /2; i++)
        {
            if (s.Length % i != 0)
                continue;

            string[] strings = ToListArray(s, i);
            if(strings.Distinct().Count() == 1) return true;
        }
        return false;

        static string[] ToListArray(string str, int length)
        {
            string[] result = new string[str.Length / length];
            int counter = 0;
            for (int i = 0; i < str.Length; i += length)
            {
                result[counter++] = str.Substring(i, length);
            }
            return result;
        }
    }

    
}